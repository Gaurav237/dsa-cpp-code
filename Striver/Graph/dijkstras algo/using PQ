vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        // **** DIJKSTRA ALGO - using Priority Queeu **** //
        
        // minHeap
        // {dist, node}   
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, S});
        
        // distance array
        vector<int> distance(V, INT_MAX);
        distance[S] = 0;
        
        while(!pq.empty()){
            int node = pq.top().second;
            int dis = pq.top().first;
            pq.pop();
            
            // look for adjacent nodes
            for(auto it : adj[node]){
                int adjNode = it[0];
                int edgeWeigt = it[1];
                
                // relax them
                if(dis + edgeWeigt < distance[adjNode]){
                    distance[adjNode] = dis + edgeWeigt;
                    
                    // push into queue, with shorter distance
                    pq.push({distance[adjNode], adjNode});
                }
            }
        }
        
        return distance;
    }